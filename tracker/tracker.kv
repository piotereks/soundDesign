#:kivy 2.1.0

#:import Factory kivy.factory.Factory

#:set color_button (0.784, 0.443, 0.216, 1)  # brown
#:set color_button_pressed (0.659, 0.522, 0.431, 1)  # darker brown
#:set color_font   (0.957, 0.890, 0.843, 1)  # off white

#: import CardTransition kivy.uix.screenmanager.CardTransition
#: import NoTransition kivy.uix.screenmanager.NoTransition
#: import FadeTransition kivy.uix.screenmanager.FadeTransition
#: import RiseInTransition kivy.uix.screenmanager.RiseInTransition
#: import SlideTransition kivy.uix.screenmanager.SlideTransition

<MySpinnerOption@SpinnerOption>:
    background_color: color_button if self.state == 'down' else color_button_pressed
    background_down: 'atlas://data/images/defaulttheme/button'
    color: color_font
    height: self.texture_size[1]*1.5
    size_hint: [2.5, None]
    # sync_height: True
    # size: [-(-self.texture_size[0]//20)*20+10,self.texture_size[1]*1]









ScreenManager:
    id: screen_manager
    transition: NoTransition()
#    transition: SlideTransition()
#    transition: CardTransition()


    MainScreen:
        id: main_scr
        name: 'main_screen'
        manager: 'screen_manager'



    ScalesSelectScreen:

        id: scales_opt
        name: 'scales_option'
        manager: 'screen_manager'
        grid_cols: app.parm_cols
        grid_rows: app.parm_rows
        grid_len: app.parm_cols * app.parm_rows
        selected_scale: app.selected_scale_button



<RadioButton>:
    orientation:'horizontal'
#    state:self.children[0].state
    ToggleButton:
        text:self.parent.text if self.parent.text else 'X'
        size_hint: [None, None]
        size: [-(-self.texture_size[0]//20)*20+10,self.texture_size[1]*2]
#        group:'keys'
        group:self.parent.parent.group
        state: self.parent.state
        on_press:
            self.state = 'down' if self.parent.state=='normal' else self.state
            app.selected_root_note = self.parent.text if self.state=='down' else  app.selected_root_note
            print(f"pressed:{self.state=}")
        on_state:
            print(f"{self.state=}")



 

<MainScreen>:
    BoxLayout:
    # Widget:
        orientation: 'vertical'
        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            padding: [20,20]
            spacing: 20
            ToggleButton:
                text: 'Play' if self.state=='normal' else 'Pause'
                id: start_stop_button
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//70)*70,self.texture_size[1]*2]

                on_state: app.play_pause(*args)
            Button:
                text:'Save'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_press: app.save()

            Widget:
                size_hint_x: 0.25
                size_hint_y: None
            Button:
                text:'rnd scale'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_press: app.rand_scale()


            Button:
                id:scale_spinner
                text: app.selected_scale_button
                size_hint: [2.5, None]
                size: [round(self.texture_size[0],-1)+30,self.texture_size[1]*2]

                on_press:   
                    print('=====on_press')
                    app.root.current='scales_option'
                    app.root.ids.scales_opt.scale_page(scale=app.selected_scale_button)

            Label:
                text: app.scale_set_name_txt if app.scale_set_name_txt else 'scale name'

                size_hint: [2.5, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
    
                valign : 'bottom'



        BoxLayout:
            orientation: 'horizontal'
            padding: [20,20]
            spacing: 10
            size_hint_y: None
            # size_y: 20
            Widget:
                size_hint_x: 1
            Button:
                id : rnd_key
                text:'rnd key'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_press: app.rand_key()
            
            Label:
                text:'keys:'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
            BoxLayout:
                id: scales_group
                orientation:'horizontal'
                size_hint_x: 4
                group:'keys'

                RadioButton:
                    text:'C'
                    state: 'down'
                RadioButton:
                    text:'C#'
                RadioButton:
                    text:'D'
                RadioButton:
                    text:'D#'
                RadioButton:
                    text:'E'
                RadioButton:
                    text:'F'
                RadioButton:
                    text:'F#'
                RadioButton:
                    text:'G'
                RadioButton:
                    text:'G#'
                RadioButton:
                    text:'A'
                RadioButton:
                    text:'A#'
                RadioButton:
                    text:'B'
            Widget:
                size_hint_x: 1


        BoxLayout:
            orientation: 'horizontal'
            size_hint_y: None
            padding: [20,20]
            spacing: 20
            ToggleButton:
                id:metronome
                text:'metronome'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_state: app.metro_on_off(*args)

            BoxLayout:
                orientation:'vertical'
                Label:
                    id:tempo_val
                    text:str(int(tempo.value))
                Slider:
                    id: tempo
                    min: app.tempo_min
                    max: app.tempo_max
                    value: app.tempo_value
                    orientation: 'horizontal'
                    on_value: app.set_tempo_f_main(*args)

            Button:
                text:'rnd func'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_press: app.rand_play_func()


            BoxLayout:
                orientation:'vertical'
                Label:
                    text:'play func'
                    size_hint: [1, None]
                    size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]

                Spinner:
                    id:func_spinner
                    text: app.func_init_text  if app.func_init_text else 'func1'
                    values: app.func_values if app.func_values else ('func1', 'func2', 'func3', 'func4')
                    size_hint: [1, None]
                    size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                    on_text : app.set_play_func(*args)

        BoxLayout:
            orientation: 'horizontal'
            padding: [20,20]
            spacing: 20

            BoxLayout:
                orientation:'vertical'
                size_hint_x: 7

                Label:
                    id:dur_variety_val
                    text:'durvar: ' + str(round(dur_variety.value,1))
                Slider:
                    id: dur_variety
                    min: app.dur_variety_min
                    max: app.dur_variety_max
                    value: app.dur_variety_value
                    step: 0.1
                    orientation: 'horizontal'
                    on_value: app.set_dur_variety_f_main(*args)


            BoxLayout:
                orientation:'vertical'
                size_hint_x: 3
                size_hint_y: 1.2

                Label:
                    text:'quantize'
                    size_hint: [None, None]
                    size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                BoxLayout:
                    id: quant_group
                    orientation:'horizontal'

    #                group: 'quantize'
                    RadioButton:
                        text:'2'
                        state: 'down'
                    RadioButton:
                        text:'3'
                    RadioButton:
                        text:'5'
            BoxLayout:
                orientation:'vertical'
                size_hint_x: 8
                size_hint_y: 1.2
                Label:
                    text:'align'
                    size_hint: [None, None]
                    size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                BoxLayout:
                    id: align_group
                    orientation:'horizontal'
#                    size_hint_x: 4
                    group: 'align'
                    RadioButton:
                        text:'2'
                        state: 'down'
                    RadioButton:
                        text:'3'
                    RadioButton:
                        text:'4'
                    RadioButton:
                        text:'5'
                    RadioButton:
                        text:'6'
                    RadioButton:
                        text:'8'
                    RadioButton:
                        text:'10'
                    RadioButton:
                        text:'12'


        BoxLayout:
            orientation: 'horizontal'
            padding: [20,20]
            spacing: 20
            ToggleButton:
                id: loopq_button
                text:'LoopQ'
                state:'down'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_state: app.loop_play(*args)

            Button:
                id: clearq_button
                text:'ClearQ'
                size_hint: [None, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
                on_press: app.clear_q()

            Label:
                id: curr_notes_pair_lbl
                text: app.curr_notes_pair_lbl_text  if app.curr_notes_pair_lbl_text else  'curr_notes_pair_lbl_text'
                size_hint: [2, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
            Label:
                id: queue_content_lbl
                text: app.queue_content_lbl_text  if app.queue_content_lbl_text else 'queue_content_lbl_text'
                size_hint: [2, None]
                size: [-(-self.texture_size[0]//10)*10+20,self.texture_size[1]*2]
        BoxLayout:
            orientation: 'vertical'
            Label:
                id: full_queue_content
                text: app.fullq_content_lbl_text  if app.fullq_content_lbl_text else 'full_queue_content_lbl_text'
            Label:
                id: check_notes_lbl
                halign:'center'
                valign:'center'
                text_size: root.width, 80
                size: self.texture_size            
                text: app.check_notes_lbl_text  if app.check_notes_lbl_text else 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'

<ScaleButton>:
    ToggleButton:
        text:'\n'.join(self.parent.raw_text) if self.parent.raw_text else 'X'
        halign: 'center'
        valign: 'middle'
        group:'scales'
        state: self.parent.state
        on_press: 
            app.selected_scale_button = self.parent.raw_text[0]

<ScalesSelectScreen>:

	BoxLayout:

	    BoxLayout:
	        size_hint_x: 0.5
	        orientation: 'vertical'
	        Button:
	            text: '<<ret'
	            size_hint_y: 1
	            on_release:
	                app.root.current='main_screen'
	                app.root.ids.scales_opt.rem_buttons()

            Button:
                id: prev_page
                text: 'prev'
                size_hint_y: 6
                on_release :
                    root.scale_page(direction='prev')


        GridLayout:
            id: button_grid
            size_hint_x: 6

            cols: app.parm_cols
            rows: app.parm_rows
            orientation: 'tb-lr'



        Button:
            id: next_page
            text: 'next'
            size_hint_x: 0.5
            on_release : 
                root.scale_page(direction='next')
